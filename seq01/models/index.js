
const {Sequelize, DataTypes} = require('sequelize')

const sequelize = new Sequelize(process.env.DB_CONNECT)  // Connect via ENV

// sequelize.authenticate().then(console.log('DB Connected üòô')).catch(err => console.log(err.message)) // Check Authen


const User = sequelize.define('User', {
    // id:{
    //     type: DataTypes.INTEGER,     // Primarykey ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ auto
    //     primaryKey: true,
    //     allowNull: false,
    //     autoIncrement: true,
    // },
    name:{
        type: DataTypes.STRING(25),
        allowNull: false,
        validate:{               // Add validate 
            isAlpha: true,
            len: [2,5]
        },       
        
        // Add Getter  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏≥ Name toUpperCase() ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏•‡∏±‡∏á add ‡πÉ‡∏´‡πâ sync alter
   
            //   get() {
            //     const rawValue = this.getDataValue('name');
            //     return rawValue ? rawValue.toUpperCase() : null;
            //   }
            get() {
                const rawValue = this.getDataValue('name');
                return rawValue ? rawValue.toUpperCase() : null;
              }

              // restruct again




    },
    password:{
        type: DataTypes.STRING(25),
        allowNull: false
    },
    image:{
        type: DataTypes.STRING(25)
    }
    },{ 
        timestamps : true,
        freezeTableName: true 
    })



const Todo = sequelize.define('Todo',{
    // id:{
    //     type:DataTypes.INTEGER,    // Primarykey ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ auto
    //     primaryKey: true,
    //     allowNull: false,
    //     autoIncrement: true
    // },
    userId : {
        type: DataTypes.INTEGER,
        allowNull: false        
    },
    title : {
        type: DataTypes.STRING(100),
        allowNull: false
    },
    dueDate: {
    type: DataTypes.DATEONLY,
    allowNull:false
    },
 // Virtuals fields   // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á sync  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ  79 -80
     inSevenDay: {
        type: DataTypes.VIRTUAL,
        get() {
            let sevenDay = new Date(this.dueDate);
            sevenDay.setDate(sevenDay.getDate()+7)
            return sevenDay
        }
     },



status : { 
      type: DataTypes.BOOLEAN,
      allowNull:false,
      defaultValue: false 

     }
    },{ 
        timestamps : false,
        freezeTableName: true 
    })

// ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ sql ‡∏£‡∏π‡πâ ‡∏ß‡πà‡∏≤ field ‡πÑ‡∏´‡∏ô ‡πÄ‡∏õ‡∏ô FK  // Default option ‡∏à‡∏∞‡πÄ‡∏õ‡∏ô cadcase  // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å update ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ sync ‡πÑ‡∏´‡πà‡πà‡∏°‡πà  (sequelize.sync({alter:true}))
    User.hasMany(Todo,{
        foreignKey: 'userId',
        onDelete: 'Restrict',
        onUpdate: 'Restrict' 
    })
    
    Todo.belongsTo(User, {
        foreignKey: 'userId',
        onDelete: 'Restrict',
        onUpdate: 'Restrict' 
    })

// command sync ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏õ‡∏¥‡∏î
//sequelize.sync({force:true})
// sequelize.sync({alter:true})
//    User.sync({force:true})
//    Todo.sync({force:true})

module.exports = {User, Todo, sequelize}